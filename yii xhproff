XHprof и Yii
Устанавливал XHprof на Ubuntu 12.04, сервер Apache, для Yii 1.х и не нашел прозрачной для себя документации, как это сделать. В итоге, с миру по нитке…

1. Установка самого расширения XHprof для PHP и Graphviz для вывода схем.

sudo add-apt-repository ppa:brianmercer/php5-xhprof
sudo apt-get update
sudo apt-get install php5-xhprof
sudo apt-get install graphviz
sudo /etc/init.d/apache2 restart
Настройки XHprof лежат в /etc/php5/conf.d/xhprof.ini, по-умолчанию такие:

extension=xhprof.so
xhprof.output_dir=/tmp
2. Далее, чтобы запустить его на своем сайте, заходим на страницу XHprof и качаем сорцы. На сегодня — это версия 0.9.4.

3. Создаем в корне сайта директорию для этой тулзы, например tools.

4. В эту директорию распаковываем папки xhprof_html и xhprof_lib из скачанного архива.

5. Дополнительно в директории xhprof_html создаем два файла:

header.php

<?php
if (extension_loaded('xhprof')) {
    $utils_path = dirname(__FILE__) . "/../xhprof_lib/utils/";
    include_once $utils_path.'xhprof_lib.php';
    include_once $utils_path.'xhprof_runs.php';
    xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);
}
footer.php

<?php
if (extension_loaded('xhprof')) {
    $profiler_namespace = 'lsp';
    $xhprof_data = xhprof_disable();
    $xhprof_runs = new XHProfRuns_Default();
    $run_id = $xhprof_runs->save_run($xhprof_data, $profiler_namespace);
    $profiler_url = sprintf('http://' . $_SERVER['SERVER_NAME'] . '/tools/xhprof_html/index.php?run=%s&source=%s', $run_id, $profiler_namespace);
    echo '<a href="'.$profiler_url.'">XHProf</a>';
}
6. Последний шаг — подключаем это все добро к нашим страницам. Я сделал это в index.php:

<?php
 
$config=dirname(__FILE__).'/protected/config/main.php';
 
if ($_SERVER['HTTP_HOST'] == 'lsp.local') {
    include(dirname(__FILE__).'/tools/xhprof_html/header.php');
    require_once(dirname(__FILE__).'/protected/c3.php');
    $yii=dirname(__FILE__).'/framework/yii.php';
    // remove the following lines when in production mode
    defined('YII_DEBUG') or define('YII_DEBUG',true);
    // specify how many levels of call stack should be shown in each log message
    defined('YII_TRACE_LEVEL') or define('YII_TRACE_LEVEL',3);
} else {
    $yii=dirname(__FILE__).'/framework/yiilite.php';
}
 
$global = dirname(__FILE__).'/protected/helpers/Global.php';
 
require_once($yii);
require_once($global);
 
Yii::createWebApplication($config)->run();
 
if ($_SERVER['HTTP_HOST'] == 'lsp.local') {
    include(dirname(__FILE__).'/tools/xhprof_html/footer.php');
}
Подключаю только для локальной копии сайта.

В итоге, имеем ссылку XHProf внизу каждой страницы сайта.

ПРОФИЛИРОВАНИЕ PHP ПРИ ПОМОЩИ XHPROF И ПОИСК «ТОРМОЗОВ» В СКРИПТАХ
Опубликовано 13.01.2014 | Автор: Олег Олейник
profilirovanie_xhprofЯ уже давно занимаюсь программированием на языке PHP и собрал большое количество инструментов, которые помогают облегчить труд программиста. Сегодня предоставляю Вашему вниманию замечательное расширение от Facebook под названием XHprof. Это расширение позволяет собрать множество данных, которые покажут практически все процессы, проходящие в момент загрузки страницы сайта или же какого-нибудь куска кода. При этом Вы узнаете, сколько было использовано оперативной памяти, загрузку процессора, количество и очередность выполнения функций и многое другое. К тому же встроенная функция построения графиков даст возможность визуально увидеть, какие происходили процессы при построении страницы сайта, а также укажет на те функции, которые «тормозят» загрузку сайта. График будет выглядеть примерно так:

xhprof1

Таким образом, можно легко отследить всю логику работы скриптов и подправить те скрипты, где возникают «тормоза».

Сразу предупрежу, что с XHprof я работаю под управлением операционной системы Linux Ubuntu, и показывать его установку я буду именно на ней. Также добавлю, что XHprof изначально был разработан под Linux и, скорее всего, найти пакет под Windows не удастся, разве что это будет какая-то неофициальная сборка. Подключить расширение XHprof к сайту можно несколькими способами, но я покажу тот, который, по моему мнению, является самым простым.

Первое, что нам нужно сделать, так это установить в Linux сам XHprof и дополнительную библиотеку Graphviz для отрисовки схем. Это делается в терминале следующим образом:

sudo add-apt-repository ppa:brianmercer/php5-xhprof
sudo apt-get update
sudo apt-get install php5-xhprof
sudo apt-get install graphviz
sudo /etc/init.d/apache2 restart
Дальше нам нужно скачать архив последней версии XHprof с сайта http://pecl.php.net/package/xhprof .  В корне сайта, к которому будем подключать XHprof, создаем папку, назвать её можно как угодно, я же по привычке называю tools. В созданную директорию извлекаем из архива две папки xhprof_html и xhprof_lib. Теперь нам нужно создать скрипты, которые будут запускать и останавливать работу XHprof. Переходим в папку xhprof_html и создаем два файла, назовем их, к примеру, header.php и footer.php.

Содержимое header.php :

<?php
    if (extension_loaded('xhprof')) {
    $utils_path = dirname(__FILE__) . "/../xhprof_lib/utils/";
    include_once $utils_path.'xhprof_lib.php';
    include_once $utils_path.'xhprof_runs.php';
    xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);}
Содержимое footer.php :


 
 <?php
 if (extension_loaded('xhprof')) {
 $profiler_namespace = 'lsp';
 $xhprof_data = xhprof_disable();
 $xhprof_runs = new XHProfRuns_Default();
 $run_id = $xhprof_runs->save_run($xhprof_data, $profiler_namespace);
 $profiler_url = sprintf('http://' . $_SERVER['SERVER_NAME'] . '/tools/xhprof_html/index.php?run=%s&source=%s', $run_id, $profiler_namespace);
 echo '<a href="'.$profiler_url.'">Open page XHProf</a>';}
Теперь достаточно подключить эти коды в начале скрипта и в конце. Вот, к примеру, как будет выглядеть профилирование работы функции phpinfo() и самописной функции number():

<?php
include (dirname(__FILE__).'/tools/xhprof_html/header.php');
phpinfo();
function number(){for($i=0; $i<'1000'; $i++){echo $i."</br>";}}
number();
include(dirname(__FILE__).'/tools/xhprof_html/footer.php');
?>
В браузере в конце страницы мы увидим вот такую ссылочку:

xhprof2

Перейдя по ссылке, мы увидим сводную информацию о процессах, которые происходили в момент формирования данной страницы.

xhprof3

Нажав на ссылку View Full Callgraph, откроется график, на котором будет показана цепочка выполнения функций:

xhprof4

На графике мы видим функцию phpinfo() и number() в виде блоков, но первый почему-то красный. А красный он потому, что такими блоками помечаются те функции, которые являются самыми медленными в цепочке функций, то есть получается, что функция phpinfo() была самой медленной на этом куске кода. Конечно, я привел элементарный пример, но если Вам нужно, можете подключить скрипт в начале и в конце файла index.php рабочего сайта и тогда Вы увидите огромный график, на котором будет разрисован весь процесс формирования страницы сайта.

На этом я завершаю данный пост, желаю всем хорошего настроения и до встречи в 
